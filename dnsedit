#!/bin/bash
SERVERIP='127.0.0.1' # Set your server public IP here if desired
BASE='' # Set your (lower case) domain zone name here (e.g. mynetwork.local)
KEYFILE='' # Set the path to your key file for nsupdate here
NAMEDCONF='/etc/bind/named.conf' # Path to named.conf file
ASSUMEBASEZONE='Y' # When zone is unspecified, assume $BASE is the zone. (Any non-blank item is recognized as true)

# The DNSEDITCONF file can be configured with override values for the above options which will supercede 
# the values specified in this script so this file can be used without editing
DNSEDITCONF="$HOME/.dnsedit"
if [[ -f $DNSEDITCONF ]]; then export $(cat $DNSEDITCONF| grep -v '^#'|xargs); fi

ZONE=''
ZONEPTR=''
PTRIP=''
ENTRY=''
ENTRY2=''
IP=''
TYPE='A'
OPERATION='Add'
VERBOSE=''

ALLZONES=($(grep 'zone ' "$NAMEDCONF" | awk '{print $2}' | tr '[:upper:]' '[:lower:]'))

function dump() {
  echo "ZONE: $ZONE ; IP: $IP"
  echo "ENTRY: $ENTRY ; ENTRY2: $ENTRY2"
}

# Parse input options and figure out what someone has asked for...
while [[ $# -gt 0 ]]; do
  lc="${1,,}"
  case $lc in
    a) TYPE='A' ;;
    ptr) TYPE='PTR' ;;
    ns) TYPE='NS' ;;
    cname) TYPE='CNAME' ;;
    del) OPERATION='Del' ;;
    add) OPERATION='Add' ;;
    list|ls) OPERATION='List' ;;
    -v*) VERBOSE='yes' ;;
    1*) IP=$1 ;;
    *)
      if [[ ${ALLZONES[@]} =~ \"$lc\" ]]; then ZONE=$lc
      elif [[ $lc =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then IP=$lc
      elif [[ ${ALLZONES[@]} =~ \"$lc.$BASE\" ]]; then ZONE=$lc.$BASE
      elif [[ $lc != ${lc/\./} ]]; then echo "$lc not valid zone or IP"
      elif [[ -z $ENTRY ]]; then ENTRY=$lc
      elif [[ -z $ENTRY2 ]]; then ENTRY2=$lc
      else
        echo "Unknown $lc"
      fi
      ;;
  esac
  shift
done
if [[ -z $ZONE && -n $ASSUMEBASEZONE ]]; then ZONE=$BASE; fi
EXISTING_RECORDS=$(dig +noquestion +nocmd +nocomments +nostat @$SERVERIP AXFR $ZONE)
[[ -z $VERBOSE ]] || dump

TOPS="server $SERVERIP\n"
TOP="${TOPS}zone $ZONE\n"
BOT="show\nsend"
# Note: A blank line is processed as a send

function doAddA() {
  echo -e "${TOP}update add $ENTRY.$ZONE 86400 $TYPE $IP\n${BOT}" | nsupdate -k "$KEYFILE"
}

function doAddCNAME() {
  echo "not implemented"
}

function doAddPTR() {
  echo -e "${TOPS}update add $PTRIP.in-addr.arpa. 4800 PTR $ENTRY.$ZONE\n${BOT}" | nsupdate -k "$KEYFILE"
}

function doAddNS() {
  echo -e "${TOP}update add $ENTRY.$ZONE. 7200 $TYPE $ENTRY2.$ZONE\n${BOT}" | nsupdate -k "$KEYFILE"
}

function isPTR() { [[ $TYPE == PTR ]]; }
function isNS() { [[ $TYPE == NS ]]; }
function isA() { [[ $TYPE == A ]]; }
function isCNAME() { [[ $TYPE == CNAME ]]; }

function lookupZone() {
  grep "^$1.$ZONE" <<<$EXISTING_RECORDS
}
function lookupIP() {
  grep "$1$" <<<$EXISTING_RECORDS
}

function check() {
  has_ip=''
  has_name2=''
  has_ptr=''
  if [[ -n $IP ]]; then has_ip=$(lookupIP $IP); fi
  has_name=$(lookupZone $ENTRY)
  if [[ -n $ENTRY2 ]]; then has_name2=$(lookupZone $ENTRY2); fi
  if [[ -n $has_name && -z $has_name2 ]] && isNS; then z=$ENTRY2; ENTRY2=$ENTRY; ENTRY=$z; has_name=$(lookupZone $ENTRY); has_name2=$(lookupZone $ENTRY2);fi
  if [[ $TYPE == A ]] || isPTR; then
    PTRIP=$(awk -F. '{print $4"."$3"."$2"."$1}' <<<$IP)
  fi
  if isA || isPTR; then
    zonetmp="${PTRIP#*.*}.in-addr.arpa"
    for n in $(seq 1 3); do
      if [[ ${ALLZONES[@]} =~ \"$zonetmp\" ]]; then ZONEPTR=$zonetmp; fi
      zonetmp="${zonetmp#*.*}"
    done
    has_ptr=$(dig +noquestion +nocmd +nocomments +nostat @$SERVERIP AXFR $ZONEPTR | grep "^$PTRIP.in-addr.arpa")
  fi
  # Perform checks
  if [[ -z $ZONE ]]; then echo "You did not specify a zone"; return 1
  elif [[ -z $ENTRY ]]; then echo "You did not specify a name to add"; return 1
  elif isNS && [[ -z $ENTRY2 ]]; then echo "You did not specify a glue record to add"; return 1
  elif isNS && [[ -z $has_name2 ]]; then echo "Specified glue record '$ENTRY2' does not exist"; return 1
  elif [[ -z $IP ]] && ! isNS; then echo "You did not specify an IP to add"; return 1
  elif [[ -n $has_ip ]] && ! isPTR; then echo "IP exists already $has_ip"; return 1
  elif [[ -n $has_name ]] && ! isPTR; then echo "Name exists already $has_name"; return 1
  elif [[ -z $has_name ]] && isPTR; then echo "Name $ENTRY does not exist yet!"; return 1
  elif (isA || isPTR) && [[ -z $ZONEPTR ]]; then echo "PTR Zone not found for $IP"; return 1
  elif isPTR && [[ -z $ZONEPTR ]]; then echo "Could not identify PTR zone for $IP"; return 1
  elif isPTR && [[ -n $has_ptr ]]; then echo "PTR record already exists!"; return 1
  fi
  if isNS; then echo "Adding $TYPE $ENTRY to zone $ZONE stub $ENTRY2"
  else echo "Adding $TYPE $ENTRY with IP $IP to zone $ZONE"; fi
  read -p "Press <enter> to continue"
  # Return 0 to continue
  return 0
}

if [[ $OPERATION == List ]]; then
  dig +noquestion +nocmd +nocomments +nostat @$SERVERIP AXFR $ZONE | grep -w $TYPE
elif check; then
  eval doAdd${TYPE}
fi
